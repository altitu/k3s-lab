---
- name: Deploy Grafana using Helm
  become: yes
  kubernetes.core.helm:
    name: grafana
    chart_repo_url: https://grafana.github.io/helm-charts
    chart_ref: grafana
    release_namespace: monitoring
    create_namespace: true
  tags: fixme
#FIXME: à décommenter !

#- name: Get all service name
#  kubernetes.core.k8s_info:
#    api_version: v1
#    kind: Service
#    namespace: ""
#  register: all_services_info

#- name: Set Grafana service name fact
#  set_fact:
#    grafana_service_name: "{{ all_services_info | json_query('resources[*].metadata.name') | regex_search('grafana.*$') }}"
##"{{ grafana_pods_info.resources | json_query('[*].metadata.name') | regex_search('grafana-.*$') }}"

#- name: ezgqg
#  debug:
#    msg: "{{ grafana_service_name }}"

# Task to get the Grafana namespace using kubernetes.core
#- name: Get Grafana namespace
#  kubernetes.core.k8s_info:
#    #kubeconfig: "/etc/rancher/k3s/k3s.yaml"
#    api_version: v1
#    kind: Pod
#    namespace: ""
#  register: grafana_pods_info

#- name: ufhoqidhf
#  debug:
#    msg: "{{ grafana_pods_info.resources | json_query(\"[*].metadata.name || [*].metadata.namespace\") }}"
#    #"{{ grafana_pods_info.resources | json_query('[*].metadata.name') | regex_search('grafana-.*$') }}"

#- name: Set Grafana namespace fact
#  set_fact:
#    namespace: "{{ grafana_pods_info.resources | regex_search('grafana-.*') }}"

#- name: FIXME
#  set_fact:
#    namespace: "monitoring"
#    grafana_service_name: "grafana"

#- name: Check if Grafana service exists
#  kubernetes.core.k8s_info:
#    kind: Service
#    namespace: "{{ namespace }}"
#    name: "{{ grafana_service_name }}"
#  register: grafana_service_info
#  #failed_when: grafana_service_info.resources | length == 0

#- name: fqdeseztq
#  debug:
#    msg: "{{ grafana_service_info }}"

#- name: Change Grafana service type to NodePort if needed
#  kubernetes.core.k8s:
#    state: present
#    definition:
#      apiVersion: v1
#      kind: Service
#      metadata:
#        name: "{{ grafana_service_name }}"
#        namespace: "{{ namespace }}"
#      spec:
#        type: NodePort
#        ports:
#          - port: 3000  # Port du service Grafana
#            targetPort: 3000
#            protocol: TCP
#  when: grafana_service_info | length > 0

#- name: Retrieve the NodePort assigned to Grafana service
#  kubernetes.core.k8s_info:
#    kind: Service
#    namespace: "{{ namespace }}"
#    name: "{{ grafana_service_name }}"
#  register: grafana_service_nodeport

#- name: Display the NodePort for accessing Grafana
#  debug:
#    msg: "Access Grafana at http://{{ ansible_host }}:{{ grafana_service_nodeport.resources[0].spec.ports[0].nodePort }}"
#  when: grafana_service_nodeport | length > 0